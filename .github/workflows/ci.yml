name: Node.js CI/CD with Docker MongoDB

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14

      - name: Install dependencies
        run: npm install

      - name: Run setup script
        run: npm run setup

  deploy:
    runs-on: self-hosted
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14

      - name: Install dependencies
        run: npm install

      - name: Ensure Docker is installed
        run: |
          if ! command -v docker &> /dev/null; then
            curl -fsSL https://get.docker.com | sh
            sudo usermod -aG docker $USER
          fi

      - name: Start MongoDB Docker container
        run: |
          docker pull mongo:6
          docker rm -f mern-mongo || echo "No existing container"
          docker run -d --name mern-mongo -p 27017:27017 \
            -e MONGO_INITDB_DATABASE=mern-admin mongo:6

      - name: Patch server.js for public access
        run: |
          FILE="server.js"
          if grep -q "app.listen(PORT" $FILE; then
            sed -i "s/app.listen(PORT/app.listen(PORT, '0.0.0.0'/g" $FILE
            echo "✅ Patched server.js to listen on 0.0.0.0"
          else
            echo "ℹ️ server.js already patched or custom format"
          fi

      - name: Set environment variables
        run: |
          echo "PORT=8087" >> $GITHUB_ENV
          echo "NODE_ENV=production" >> $GITHUB_ENV
          echo "DB_URI=mongodb://localhost:27017/mern-admin" >> $GITHUB_ENV

      - name: Open port 8087 for public access
        run: |
          sudo ufw allow 8087 || echo "Port already allowed"
          sudo ufw reload

      - name: Stop existing app (if running)
        run: |
          pkill -f "node server.js" || echo "No existing process"

      - name: Start app with PM2
        run: |
          npm install -g pm2
          pm2 delete mern-admin || echo "No previous PM2 app"
          pm2 start server.js --name mern-admin --watch --no-daemon
          sleep 5

      - name: Wait until app is ready
        run: |
          MAX_RETRIES=20
          COUNT=0
          until curl -s http://0.0.0.0:8087/ || [ $COUNT -ge $MAX_RETRIES ]; do
            echo "Waiting for app to start..."
            COUNT=$((COUNT+1))
            sleep 5
          done

  test:
    runs-on: self-hosted
    needs: deploy
    steps:
      - name: Test app response on public IP
        run: |
          VM_IP="54.87.191.72"
          MAX_RETRIES=15
          COUNT=0
          until curl -s http://$VM_IP:8087/ | grep -q "<!DOCTYPE html>" || [ $COUNT -ge $MAX_RETRIES ]; do
            echo "Waiting for public access..."
            COUNT=$((COUNT+1))
            sleep 5
          done

          if curl -s http://$VM_IP:8087/ | grep -q "<!DOCTYPE html>"; then
            echo "✅ App is publicly accessible at http://$VM_IP:8087"
          else
            echo "❌ App is not responding publicly!"
            exit 1
          fi
